{"version":3,"sources":["webpack://wavecanvas/webpack/universalModuleDefinition","webpack://wavecanvas/webpack/bootstrap","webpack://wavecanvas/./index.ts","webpack://wavecanvas/../node_modules/3vl/dist/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_3vl_1","Vector3vl","calcGridStep","gridStep","pixelsPerTick","gridMinDist","Waveform","[object Object]","_bits","_data","length","_present","bits","Math","max","v","console","assert","pt","pv","eq","push","binsearch","k","first","last","middle","mtick","slice","map","defaultSettings","start","bitColors","gapScale","heightFill","base","gridWidth","gridColor","font","freeze","extendSettings","settings","newSettings","props","entries","writable","drawWaveform","w","v2b","b","toBin","toHex","toOct","clearRect","canvas","width","height","span","updatePresent","present","data","getRange","ceil","zdata","e","pop","t2x","min","xy","hy","ly","b2y","b2c","w2c","isDefined","isLow","isHigh","grad","createLinearGradient","addColorStop","lineWidth","x","beginPath","strokeStyle","moveTo","lineTo","stroke","at","av","bt","bv","ax","bx","ab","bb","ay","by","ac","gap","abs","bc","ad","bd","textAlign","textBaseline","txt","measureText","fillText","zip","f","a","zip4","bitfold","lastmask","neutral","acc","bitnum","fillRest","words","avec","bvec","last_x","fill","makeMap","depth","ret","g","what","val","toString","seal","fromBinMap","fromOctMap","fromHexMap","toHexInternal","out","bit","reverse","join","toBinInternal","fromHexInternal","nbits","frag","mask","fromBinInternal","_avec","_bvec","init","iva","ivb","undefined","Uint32Array","make","vs","reduce","y","idx","normalize","set","iter","skip","fromIteratorPow2","fromIteratorAnySkip","Number","msb","lsb","bn","wn","wordnum","_lastmask","vechigh","vec","every","veclow","dvec","isFullyDefined","some","Boolean","a1","a2","b1","b2","of","has_x","reduceXor","not","concat","end","toIteratorPow2","toIteratorAnySkip","sm","m1","empty","zeros","one","ones","zero","xes","Mem3vl","size","_size","_wpc","j","rep","rleval","hexbuf","rlecnt","hexflush","rleflush","rlepush","check","xx","xm","hexlen","xsize","decode","Array","keys","toArray"],"mappings":"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","file":"wavecanvas.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"wavecanvas\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"wavecanvas\"] = factory();\n\telse\n\t\troot[\"wavecanvas\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nimport { Vector3vl } from '3vl';\n\nexport { Vector3vl };\n\nexport class Waveform {\n    private _present : number;\n\n    constructor(private readonly _bits : number, private readonly _data : [number, Vector3vl][] = []) {\n        if (_data.length == 0) this._present = -1;\n        else this._present = this._data[this._data.length-1][0];\n    }\n\n    get bits() {\n        return this._bits;\n    }\n\n    updatePresent(t : number) {\n        this._present = Math.max(this._present, t);\n    }\n\n    push(t : number, v : Vector3vl) {\n        console.assert(v.bits == this._bits && t >= this._present);\n        this._present = t;\n        if (this._data.length > 0) {\n            const [pt, pv] = this._data[this._data.length-1];\n            if (pv.eq(v)) return;\n            console.assert(t >= pt);\n            if (t == pt) { // overwrite\n                this._data[this._data.length-1][1] = v;\n                return;\n            }\n        }\n        this._data.push([t, v]);\n    }\n\n    getRange(i : number, n : number): [number, Vector3vl][] {\n        if (this._data.length == 0) return [];\n        const binsearch = (k : number) => {\n            let first = 0, last = this._data.length;\n            while (last > first) {\n                const middle = (first + last) >> 1;\n                const mtick = this._data[middle][0];\n                if (k == mtick) return middle;\n                else if (k < mtick) last = middle;\n                else first = middle + 1;\n            }\n            if (first == this._data.length) return first - 1;\n            return first;\n        };\n        let first = binsearch(i);\n        let last = binsearch(i+n);\n        if (first > 0 && this._data[first][0] > i) first--;\n        if (last < this._data.length-1 && this._data[last][0] < i+n) last++;\n        const s = this._data.slice(first, last + 1).map((p) : [number, Vector3vl] => [p[0], p[1]]);\n        if (s[s.length-1][0] < i+n && this._present > s[s.length-1][0])\n            s.push([this._present, s[s.length-1][1]]);\n        return s;\n    }\n}\n\ntype base = 'hex' | 'oct' | 'bin';\n\nexport interface WaveCanvasSettings {\n    start : number,\n    pixelsPerTick : number,\n    present? : number,\n    bitColors : [string, string, string, string],\n    heightFill : number,\n    gapScale : number,\n    base : base,\n    gridWidth : number,\n    gridColor : string,\n    gridStep : number,\n    gridMinDist : number,\n    font : string\n}\n\nexport const defaultSettings : WaveCanvasSettings = {\n    start: 0,\n    pixelsPerTick: 10,\n    bitColors: ['#fc7c68', '#999', '#03c03c', '#779ecb'],\n    gapScale: 0.2,\n    heightFill: 0.8,\n    base: 'hex',\n    gridWidth: 0.5,\n    gridColor: 'gray',\n    gridStep: 1,\n    gridMinDist: 10,\n    font: '10px sans-serif'\n};\n\nObject.freeze(defaultSettings);\n\nexport function extendSettings(settings : WaveCanvasSettings, newSettings) : WaveCanvasSettings {\n    var props = {};\n    for (const [k, v] of Object.entries(newSettings)) {\n        props[k] = {value: v, writable: true};\n    }\n    const ret = Object.create(settings, props);\n    return ret;\n}\n\nexport function calcGridStep(s : WaveCanvasSettings) {\n    let gridStep = s.gridStep;\n    while (gridStep * s.pixelsPerTick < s.gridMinDist) {\n        if (10 * gridStep * s.pixelsPerTick < s.gridMinDist) gridStep *= 10;\n        else if (2 * gridStep * s.pixelsPerTick >= s.gridMinDist) gridStep *= 2;\n        else if (5 * gridStep * s.pixelsPerTick >= s.gridMinDist) gridStep *= 5;\n        else gridStep *= 10;\n    }\n    return gridStep;\n}\n\nexport function drawWaveform(w : Waveform, c : CanvasRenderingContext2D, s : WaveCanvasSettings) {\n    const v2b = (v, b) => {\n        switch(b) {\n            case 'bin': return v.toBin();\n            case 'hex': return v.toHex();\n            case 'oct': return v.toOct();\n        }\n    };\n    c.clearRect(0, 0, c.canvas.width, c.canvas.height);\n    const span = c.canvas.width / s.pixelsPerTick;\n    if ('present' in s) w.updatePresent(s.present);\n    const data = w.getRange(s.start, Math.ceil(span));\n    const zdata = data.map((e, i) => [e, data[i+1]]);\n    zdata.pop();\n    const t2x = (t) => (Math.max(Math.min(t, s.start + span), s.start) - s.start) * s.pixelsPerTick;\n    const xy = 0.5 * c.canvas.height;\n    const hy = (0.5 - s.heightFill / 2) * c.canvas.height;\n    const ly = (0.5 + s.heightFill / 2) * c.canvas.height;\n    const b2y = (b) => [ly, xy, hy][b+1];\n    const b2c = (b) => s.bitColors[b+1];\n    const w2c = (w) => s.bitColors[!w.isDefined ? 1 : w.isLow ? 0 : w.isHigh ? 2 : 3];\n    const grad = c.createLinearGradient(0, ly, 0, hy);\n    grad.addColorStop(0, s.bitColors[0]);\n    grad.addColorStop(0.5, s.bitColors[1]);\n    grad.addColorStop(1, s.bitColors[2]);\n    c.lineWidth = s.gridWidth;\n    const gridStep = calcGridStep(s);\n    for (let t = s.start - (s.start % gridStep); t < s.start + span; t += gridStep) {\n        const x = t2x(t);\n        c.beginPath();\n        c.strokeStyle = s.gridColor;\n        c.moveTo(x, 0);\n        c.lineTo(x, c.canvas.height);\n        c.stroke();\n    }\n    c.lineWidth = 2;\n    for (const [[at, av], [bt, bv]] of zdata) {\n        const ax = t2x(at), bx = t2x(bt);\n        if (w.bits == 1) {\n            const ab = av.get(0), bb = bv.get(0);\n            const ay = b2y(ab), by = b2y(bb);\n            const ac = b2c(ab), bc = b2c(bb);\n            const gap = Math.min(Math.abs(ay-by) * s.gapScale, s.pixelsPerTick / 2);\n            c.beginPath();\n            c.strokeStyle = grad;\n            c.moveTo(bx - gap, ay);\n            c.lineTo(bx, by);\n            c.stroke();\n            c.beginPath();\n            c.strokeStyle = ac;\n            c.moveTo(ax, ay);\n            c.lineTo(bx - gap, ay);\n            c.stroke();\n        } else {\n            const gap = Math.min(Math.abs(hy-ly) * s.gapScale, s.pixelsPerTick / 2);\n            const ac = w2c(av), bc = w2c(bv);\n            const ad = av.isDefined, bd = bv.isDefined;\n            if (ad) {\n                c.textAlign = 'center';\n                c.textBaseline = 'middle';\n                c.font = s.font;\n                const txt = v2b(av, s.base);\n                const meas = c.measureText(txt);\n                if (meas.width < (bx-ax-gap)*2)\n                    c.fillText(v2b(av, s.base), (ax+bx-gap)/2, c.canvas.height/2, bx-ax-gap);\n            }\n            if (!ad && !bd) {\n                c.beginPath();\n                c.strokeStyle = ac;\n                c.moveTo(ax, xy);\n                c.lineTo(bx, xy);\n                c.stroke();\n            } else if (av.eq(bv)) {\n                c.strokeStyle = bc;\n                c.beginPath();\n                c.moveTo(ax, hy);\n                c.lineTo(bx, hy);\n                c.stroke();\n                c.beginPath();\n                c.moveTo(ax, ly);\n                c.lineTo(bx, ly);\n                c.stroke();\n            } else {\n                c.strokeStyle = bc;\n                if (bd) {\n                    c.beginPath();\n                    c.moveTo(bx, hy);\n                    c.lineTo(bx - gap/2, xy);\n                    c.lineTo(bx, ly);\n                    c.stroke();\n                } else {\n                    c.beginPath();\n                    c.moveTo(bx, xy);\n                    c.lineTo(bx - gap/2, xy);\n                    c.stroke();\n                }\n                c.strokeStyle = ac;\n                if (ad) {\n                    c.beginPath();\n                    c.moveTo(ax, hy);\n                    c.lineTo(bx - gap, hy);\n                    c.lineTo(bx - gap/2, xy);\n                    c.lineTo(bx - gap, ly);\n                    c.lineTo(ax, ly);\n                    c.stroke();\n                } else {\n                    c.beginPath();\n                    c.moveTo(ax, xy);\n                    c.lineTo(bx - gap/2, xy);\n                    c.stroke();\n                }\n            }\n        }\n    }\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction zip(f, a, b) {\n    return a.map((x, i) => f(x, b[i]));\n}\nfunction zip4(f, a, b, c, d) {\n    return a.map((x, i) => f(x, b[i], c[i], d[i]));\n}\nfunction bitfold(f, a, lastmask, neutral) {\n    if (a.length == 0)\n        return (neutral == 1) ? 1 : 0;\n    let acc = a[a.length - 1];\n    if (neutral == 1)\n        acc |= ~lastmask;\n    else\n        acc &= lastmask;\n    for (let i = 0; i < a.length - 1; i++)\n        acc = f(acc, a[i]);\n    acc = f(acc, acc >>> 16);\n    acc = f(acc, acc >>> 8);\n    acc = f(acc, acc >>> 4);\n    acc = f(acc, acc >>> 2);\n    acc = f(acc, acc >>> 1);\n    return acc & 1;\n}\nfunction wordnum(n) {\n    return n >> 5;\n}\nfunction bitnum(n) {\n    return n & 0x1f;\n}\nfunction fillRest(m, k, words, avec, bvec) {\n    const last_x = m > 0 && !(avec[k] & (1 << (m - 1)))\n        && (bvec[k] & (1 << (m - 1)));\n    if (last_x && bitnum(m))\n        bvec[k] |= (-1) << m;\n    if (last_x && k + 1 < words) {\n        bvec.fill(-1, k + 1);\n    }\n}\nfunction makeMap(bits, depth) {\n    const ret = {};\n    function g(what, val) {\n        ret[what] = val;\n        if (what.length * bits >= depth)\n            return;\n        for (let i = 0; i < (1 << bits); i += 1)\n            g(what + i.toString(1 << bits), (val << bits) | i | (i << 16));\n        g(what + 'x', (val << bits) | ((1 << bits) - 1));\n    }\n    g(\"\", 0);\n    Object.seal(ret);\n    return ret;\n}\nconst fromBinMap = makeMap(1, 8);\nconst fromOctMap = makeMap(3, 3);\nconst fromHexMap = makeMap(4, 8);\nfunction toHexInternal(start, bits, avec, bvec) {\n    // copy-paste'y code for performance\n    const out = [];\n    let bit = 0, k = start;\n    while (bit < bits) {\n        const a = '00000000' + avec[k].toString(16);\n        const x = avec[k] ^ bvec[k];\n        k++;\n        for (let b = 0; b < 8 && bit < bits; b++, bit += 4) {\n            if (x & (0xf << 4 * b))\n                out.push('x');\n            else\n                out.push(a[a.length - 1 - b]);\n        }\n    }\n    return out.reverse().join('');\n}\nfunction toBinInternal(start, bits, avec, bvec) {\n    // copy-paste'y code for performance\n    const out = [];\n    let bit = 0, k = start;\n    while (bit < bits) {\n        const a = '00000000000000000000000000000000'\n            + avec[k].toString(2);\n        const x = avec[k] ^ bvec[k];\n        k++;\n        for (let b = 0; b < 32 && bit < bits; b++, bit++) {\n            if (x & (1 << b))\n                out.push('x');\n            else\n                out.push(a[a.length - 1 - b]);\n        }\n    }\n    return out.reverse().join('');\n}\nfunction fromHexInternal(data, start, nbits, avec, bvec) {\n    // copy-paste'y code for performance\n    const skip = 4;\n    const words = (nbits + 31) >>> 5;\n    let m = 0, k = -1 + start;\n    for (let i = data.length; i > 0;) {\n        const frag = data.slice(Math.max(0, i - 2), i);\n        i -= frag.length;\n        const v = fromHexMap[frag];\n        if (bitnum(m) == 0)\n            k++;\n        const mask = (1 << skip * frag.length) - 1;\n        avec[k] |= ((v >>> 16) & mask) << m;\n        bvec[k] |= (v & mask) << m;\n        m += skip * frag.length;\n    }\n    if (m < nbits)\n        fillRest(m, k, words, avec, bvec);\n}\nfunction fromBinInternal(data, start, nbits, avec, bvec) {\n    // copy-paste'y code for performance\n    const skip = 1;\n    const words = (nbits + 31) >>> 5;\n    let m = 0, k = -1 + start;\n    for (let i = data.length; i > 0;) {\n        const frag = data.slice(Math.max(0, i - 8), i);\n        i -= frag.length;\n        const v = fromBinMap[frag];\n        if (bitnum(m) == 0)\n            k++;\n        const mask = (1 << skip * frag.length) - 1;\n        avec[k] |= ((v >>> 16) & mask) << m;\n        bvec[k] |= (v & mask) << m;\n        m += skip * frag.length;\n    }\n    if (m < nbits)\n        fillRest(m, k, words, avec, bvec);\n}\n/**\n * Three-value logic vectors.\n *\n * This is a data class -- its contents are not mutable. Operations on logic\n * vectors return a freshly allocated vector.\n *\n * The internal representation is two bit vectors: bit vector A and B.\n * The value at position _n_ is encoded by two bits, one at position _n_ in\n * bit vector A, the other at same position in bit vector B. The bit\n * combinations have the following meanings:\n *\n * * A: 0, B: 0 -- logical 0,\n * * A: 0, B: 1 -- undefined value, \"x\",\n * * A: 1, B: 1 -- logical 1.\n */\nclass Vector3vl {\n    /**\n     * Private constructor for three-value logic vectors.\n     *\n     * **Only for internal use.**\n     *\n     * @param bits Number of bits in the vector.\n     * @param avec Bit vector A.\n     * @param bvec Bit vector B.\n     */\n    constructor(bits, avec, bvec) {\n        this._bits = bits;\n        this._avec = avec;\n        this._bvec = bvec;\n    }\n    /**\n     * Construct a vector with a constant value at each position.\n     *\n     * @param bits Number of bits in the vector.\n     * @param init Initializer. Recognized values:\n     * * false, -1, '0' for logical 0,\n     * * 0, 'x' for undefined value,\n     * * true, 1, '1' for logical 1.\n     */\n    static make(bits, init) {\n        bits = bits | 0;\n        let iva, ivb;\n        switch (init) {\n            case true:\n            case '1':\n            case 1:\n                iva = ivb = ~0;\n                break;\n            case false:\n            case '0':\n            case -1:\n            case undefined:\n                iva = ivb = 0;\n                break;\n            case 'x':\n            case 0:\n                iva = 0;\n                ivb = ~0;\n                break;\n            default: console.assert(false);\n        }\n        const words = (bits + 31) / 32 | 0;\n        return new Vector3vl(bits, new Uint32Array(words).fill(iva), new Uint32Array(words).fill(ivb));\n    }\n    /**\n     * Construct a vector containing only zeros.\n     *\n     * @param bits Number of bits in the vector.\n     */\n    static zeros(bits) {\n        return Vector3vl.make(bits, -1);\n    }\n    /**\n     * Construct a vector containing only ones.\n     *\n     * @param bits Number of bits in the vector.\n     */\n    static ones(bits) {\n        return Vector3vl.make(bits, 1);\n    }\n    /**\n     * Construct a vector containing only undefined values.\n     *\n     * @param bits Number of bits in the vector.\n     */\n    static xes(bits) {\n        return Vector3vl.make(bits, 0);\n    }\n    /**\n     * Construct a singleton vector containing _b_.\n     */\n    static fromBool(b) {\n        return Vector3vl.make(1, b ? 1 : -1);\n    }\n    /**\n     * Concatenate vectors into a single big vector.\n     *\n     * @param vs Vectors to concatenate.\n     *           Arguments are ordered least significant bit first.\n     */\n    static concat(...vs) {\n        const sumbits = vs.reduce((y, x) => x.bits + y, 0);\n        const words = (sumbits + 31) >>> 5;\n        let bits = 0, idx = -1, avec = new Uint32Array(words), bvec = new Uint32Array(words);\n        for (const v of vs) {\n            v.normalize();\n            if (bitnum(bits) == 0) {\n                avec.set(v._avec, idx + 1);\n                bvec.set(v._bvec, idx + 1);\n                bits += v._bits;\n                idx += (v._bits + 31) >>> 5;\n            }\n            else {\n                for (const k in v._avec) {\n                    avec[idx] |= v._avec[k] << bits;\n                    bvec[idx] |= v._bvec[k] << bits;\n                    idx++;\n                    if (idx == words)\n                        break;\n                    avec[idx] = v._avec[k] >>> -bits;\n                    bvec[idx] = v._bvec[k] >>> -bits;\n                }\n                bits += v._bits;\n                if (idx + 1 > (bits + 31) >>> 5) {\n                    idx--;\n                }\n            }\n        }\n        return new Vector3vl(bits, avec, bvec);\n    }\n    /**\n     * Construct a vector from an iterable.\n     *\n     * This function calls [[fromIteratorAnySkip]] or [[fromIteratorPow2]].\n     *\n     * @param iter Iterable returning initialization values, least to most\n     *             significant. First _skip_ bits go to vector B, next\n     *             _skip_ bits go to vector A.\n     * @param skip Number of bits in a single iterator step. 1 to 16.\n     * @param nbits Number of bits in the vector.\n     */\n    static fromIterator(iter, skip, nbits) {\n        if ((skip & (skip - 1)) == 0)\n            return Vector3vl.fromIteratorPow2(iter, skip, nbits);\n        else\n            return Vector3vl.fromIteratorAnySkip(iter, skip, nbits);\n    }\n    /**\n     * Construct a vector from an iterable.\n     *\n     * This function is more generic, but slower, than [[fromIteratorPow2]].\n     *\n     * @param iter Iterable returning initialization values, least to most\n     *             significant. First _skip_ bits go to vector B, next\n     *             _skip_ bits go to vector A.\n     * @param skip Number of bits in a single iterator step. 1 to 16.\n     * @param nbits Number of bits in the vector.\n     */\n    static fromIteratorAnySkip(iter, skip, nbits) {\n        const words = (nbits + 31) >>> 5;\n        let m = 0, k = -1, avec = new Uint32Array(words), bvec = new Uint32Array(words);\n        const mask = (1 << skip) - 1;\n        for (const v of iter) {\n            if (bitnum(m) == 0)\n                k++;\n            avec[k] |= ((v >>> skip) & mask) << m;\n            bvec[k] |= (v & mask) << m;\n            if (((mask << m) >>> m) != mask) {\n                k++;\n                avec[k] = ((v >>> skip) & mask) >>> -m;\n                bvec[k] = (v & mask) >>> -m;\n            }\n            m += skip;\n        }\n        if (m < nbits)\n            fillRest(m, k, words, avec, bvec);\n        return new Vector3vl(nbits, avec, bvec);\n    }\n    /**\n     * Construct a vector from an iterable.\n     *\n     * This function is limited to power of 2 _skip_ values.\n     * For generic version, see [[fromIteratorAnySkip]].\n     *\n     * @param iter Iterable returning initialization values, least to most\n     *             significant. First _skip_ bits go to vector B, next\n     *             _skip_ bits go to vector A.\n     * @param skip Number of bits in a single iterator step.\n     *             Limited to powers of 2: 1, 2, 4, 8, 16.\n     * @param nbits Number of bits in the vector.\n     */\n    static fromIteratorPow2(iter, skip, nbits) {\n        const words = (nbits + 31) >>> 5;\n        let m = 0, k = -1, avec = new Uint32Array(words), bvec = new Uint32Array(words);\n        const mask = (1 << skip) - 1;\n        for (const v of iter) {\n            if (bitnum(m) == 0)\n                k++;\n            avec[k] |= ((v >>> skip) & mask) << m;\n            bvec[k] |= (v & mask) << m;\n            m += skip;\n        }\n        if (m < nbits)\n            fillRest(m, k, words, avec, bvec);\n        return new Vector3vl(nbits, avec, bvec);\n    }\n    /**\n     * Construct a vector from an array of numbers.\n     *\n     * The following interpretation is used:\n     * * -1 for logical 0,\n     * * 0 for undefined value,\n     * * 1 for logical 1.\n     *\n     * @param data Input array.\n     */\n    static fromArray(data) {\n        // copy-paste'y code for performance\n        const nbits = data.length;\n        const skip = 1;\n        const words = (nbits + 31) >>> 5;\n        let m = 0, k = -1, avec = new Uint32Array(words), bvec = new Uint32Array(words);\n        const mask = (1 << skip) - 1;\n        for (const x of data) {\n            const v = x + 1 + Number(x > 0);\n            if (bitnum(m) == 0)\n                k++;\n            avec[k] |= ((v >>> skip) & mask) << m;\n            bvec[k] |= (v & mask) << m;\n            m += skip;\n        }\n        if (m < nbits)\n            fillRest(m, k, words, avec, bvec);\n        return new Vector3vl(nbits, avec, bvec);\n    }\n    /**\n     * Construct a vector from a binary string.\n     *\n     * Three characters are accepted:\n     * * '0' for logical 0,\n     * * 'x' for undefined value,\n     * * '1' for logical 1.\n     *\n     * If _nbits_ is given, _data_ is either truncated, or extended with\n     * undefined values.\n     *\n     * @param data The binary string to be parsed.\n     * @param nbits Number of bits in the vector. If omitted, the resulting\n     *              vector has number of bits equal to the length of _data_.\n     */\n    static fromBin(data, nbits) {\n        if (nbits === undefined)\n            nbits = data.length;\n        const words = (nbits + 31) >>> 5;\n        const avec = new Uint32Array(words), bvec = new Uint32Array(words);\n        fromBinInternal(data, 0, nbits, avec, bvec);\n        return new Vector3vl(nbits, avec, bvec);\n    }\n    /**\n     * Construct a vector from an octal number.\n     *\n     * Characters '0' to '7' and 'x' are accepted. The character 'x'\n     * means three undefined bits.\n     *\n     * If _nbits_ is given, _data_ is either truncated, or extended with\n     * undefined values.\n     *\n     * @param data The octal string to be parsed.\n     * @param nbits Number of bits in the vector. If omitted, the resulting\n     *              vector has number of bits equal to the length of _data_\n     *              times three.\n     */\n    static fromOct(data, nbits) {\n        // copy-paste'y code for performance\n        const skip = 3;\n        if (nbits === undefined)\n            nbits = data.length * skip;\n        const words = (nbits + 31) >>> 5;\n        let m = 0, k = -1, avec = new Uint32Array(words), bvec = new Uint32Array(words);\n        const mask = (1 << skip) - 1;\n        for (let i = data.length - 1; i >= 0; i--) {\n            const v = fromOctMap[data[i]];\n            if (bitnum(m) == 0)\n                k++;\n            avec[k] |= ((v >>> 16) & mask) << m;\n            bvec[k] |= (v & mask) << m;\n            if (((mask << m) >>> m) != mask) {\n                k++;\n                avec[k] = ((v >>> 16) & mask) >>> -m;\n                bvec[k] = (v & mask) >>> -m;\n            }\n            m += skip;\n        }\n        if (m < nbits)\n            fillRest(m, k, words, avec, bvec);\n        return new Vector3vl(nbits, avec, bvec);\n    }\n    /**\n     * Construct a vector from a hexadecimal number.\n     *\n     * Characters '0' to '9', 'a' to 'f' and 'x' are accepted. The character\n     * 'x' means three undefined bits.\n     *\n     * If _nbits_ is given, _data_ is either truncated, or extended with\n     * undefined values.\n     *\n     * @param data The hexadecimal string to be parsed.\n     * @param nbits Number of bits in the vector. If omitted, the resulting\n     *              vector has number of bits equal to the length of _data_\n     *              times four.\n     */\n    static fromHex(data, nbits) {\n        if (nbits === undefined)\n            nbits = data.length * 4;\n        const words = (nbits + 31) >>> 5;\n        const avec = new Uint32Array(words), bvec = new Uint32Array(words);\n        fromHexInternal(data, 0, nbits, avec, bvec);\n        return new Vector3vl(nbits, avec, bvec);\n    }\n    /**\n     * Number of bits in the vector.\n     */\n    get bits() {\n        return this._bits;\n    }\n    /**\n     * Most significant bit in the vector. Returns -1, 0 or 1.\n     */\n    get msb() {\n        return this.get(this._bits - 1);\n    }\n    /**\n     * Least significant bit in the vector. Returns -1, 0 or 1.\n     */\n    get lsb() {\n        return this.get(0);\n    }\n    /**\n     * Gets _n_th value in the vector. Returns -1, 0 or 1.\n     */\n    get(n) {\n        const bn = bitnum(n);\n        const wn = wordnum(n);\n        const a = (this._avec[wn] >>> bn) & 1;\n        const b = (this._bvec[wn] >>> bn) & 1;\n        return a + b - 1;\n    }\n    /**\n     * Tests if the vector is all ones.\n     */\n    get isHigh() {\n        if (this._bits == 0)\n            return true;\n        const lastmask = this._lastmask;\n        const vechigh = (vec) => vec.slice(0, vec.length - 1).every(x => ~x == 0) && (vec[vec.length - 1] & lastmask) == lastmask;\n        return vechigh(this._avec) && vechigh(this._bvec);\n    }\n    /**\n     * Tests if the vector is all zeros.\n     */\n    get isLow() {\n        if (this._bits == 0)\n            return true;\n        const lastmask = this._lastmask;\n        const veclow = (vec) => vec.slice(0, vec.length - 1).every(x => x == 0) && (vec[vec.length - 1] & lastmask) == 0;\n        return veclow(this._avec) && veclow(this._bvec);\n    }\n    /**\n     * Tests if there is any defined bit in the vector.\n     */\n    get isDefined() {\n        if (this._bits == 0)\n            return false;\n        const dvec = zip((a, b) => a ^ b, this._avec, this._bvec);\n        dvec[dvec.length - 1] |= ~this._lastmask;\n        return !dvec.every(x => ~x == 0);\n    }\n    /**\n     * Tests if every bit in the vector is defined.\n     */\n    get isFullyDefined() {\n        if (this._bits == 0)\n            return true;\n        const dvec = zip((a, b) => a ^ b, this._avec, this._bvec);\n        dvec[dvec.length - 1] &= this._lastmask;\n        return !dvec.some(x => Boolean(x));\n    }\n    /**\n     * Bitwise AND of two vectors.\n     *\n     * The vectors need to be the same bit length.\n     *\n     * @param v The other vector.\n     */\n    and(v) {\n        console.assert(v._bits == this._bits);\n        return new Vector3vl(this._bits, zip((a, b) => a & b, v._avec, this._avec), zip((a, b) => a & b, v._bvec, this._bvec));\n    }\n    /**\n     * Bitwise OR of two vectors.\n     *\n     * The vectors need to be the same bit length.\n     *\n     * @param v The other vector.\n     */\n    or(v) {\n        console.assert(v._bits == this._bits);\n        return new Vector3vl(this._bits, zip((a, b) => a | b, v._avec, this._avec), zip((a, b) => a | b, v._bvec, this._bvec));\n    }\n    /**\n     * Bitwise XOR of two vectors.\n     *\n     * The vectors need to be the same bit length.\n     *\n     * @param v The other vector.\n     */\n    xor(v) {\n        console.assert(v._bits == this._bits);\n        return new Vector3vl(this._bits, zip4((a1, a2, b1, b2) => (a1 | b1) & (a2 ^ b2), v._avec, v._bvec, this._avec, this._bvec), zip4((a1, a2, b1, b2) => (a1 & b1) ^ (a2 | b2), v._avec, v._bvec, this._avec, this._bvec));\n    }\n    /**\n     * Bitwise NAND of two vectors.\n     *\n     * The vectors need to be the same bit length.\n     *\n     * @param v The other vector.\n     */\n    nand(v) {\n        console.assert(v._bits == this._bits);\n        return new Vector3vl(this._bits, zip((a, b) => ~(a & b), v._bvec, this._bvec), zip((a, b) => ~(a & b), v._avec, this._avec));\n    }\n    /**\n     * Bitwise NOR of two vectors.\n     *\n     * The vectors need to be the same bit length.\n     *\n     * @param v The other vector.\n     */\n    nor(v) {\n        console.assert(v._bits == this._bits);\n        return new Vector3vl(this._bits, zip((a, b) => ~(a | b), v._bvec, this._bvec), zip((a, b) => ~(a | b), v._avec, this._avec));\n    }\n    /**\n     * Bitwise XNOR of two vectors.\n     *\n     * The vectors need to be the same bit length.\n     *\n     * @param v The other vector.\n     */\n    xnor(v) {\n        console.assert(v._bits == this._bits);\n        return new Vector3vl(this._bits, zip4((a1, a2, b1, b2) => ~((a1 & b1) ^ (a2 | b2)), v._avec, v._bvec, this._avec, this._bvec), zip4((a1, a2, b1, b2) => ~((a1 | b1) & (a2 ^ b2)), v._avec, v._bvec, this._avec, this._bvec));\n    }\n    /**\n     * Bitwise NOT of a vector. */\n    not() {\n        return new Vector3vl(this._bits, this._bvec.map(a => ~a), this._avec.map(a => ~a));\n    }\n    /**\n     * Return a vector with 1 on locations with x, the rest with 0.\n     */\n    xmask() {\n        const v = zip((a, b) => a ^ b, this._avec, this._bvec);\n        return new Vector3vl(this._bits, v, v);\n    }\n    /**\n     * Reducing AND of a vector.\n     *\n     * ANDs all bits of the vector together, producing a single bit.\n     *\n     * @returns Singleton vector.\n     */\n    reduceAnd() {\n        return new Vector3vl(1, Uint32Array.of(bitfold((a, b) => a & b, this._avec, this._lastmask, 1)), Uint32Array.of(bitfold((a, b) => a & b, this._bvec, this._lastmask, 1)));\n    }\n    /**\n     * Reducing OR of a vector.\n     *\n     * ORs all bits of the vector together, producing a single bit.\n     *\n     * @returns Singleton vector.\n     */\n    reduceOr() {\n        return new Vector3vl(1, Uint32Array.of(bitfold((a, b) => a | b, this._avec, this._lastmask, 0)), Uint32Array.of(bitfold((a, b) => a | b, this._bvec, this._lastmask, 0)));\n    }\n    /**\n     * Reducing NAND of a vector.\n     *\n     * NANDs all bits of the vector together, producing a single bit.\n     *\n     * @returns Singleton vector.\n     */\n    reduceNand() {\n        return new Vector3vl(1, Uint32Array.of(~bitfold((a, b) => a & b, this._bvec, this._lastmask, 1)), Uint32Array.of(~bitfold((a, b) => a & b, this._avec, this._lastmask, 1)));\n    }\n    /**\n     * Reducing NOR of a vector.\n     *\n     * NORs all bits of the vector together, producing a single bit.\n     *\n     * @returns Singleton vector.\n     */\n    reduceNor() {\n        return new Vector3vl(1, Uint32Array.of(~bitfold((a, b) => a | b, this._bvec, this._lastmask, 0)), Uint32Array.of(~bitfold((a, b) => a | b, this._avec, this._lastmask, 0)));\n    }\n    /**\n     * Reducing XOR of a vector.\n     *\n     * XORs all bits of the vector together, producing a single bit.\n     *\n     * @returns Singleton vector.\n     */\n    reduceXor() {\n        const xes = zip((a, b) => ~a & b, this._avec, this._bvec);\n        const has_x = bitfold((a, b) => a | b, xes, this._lastmask, 0);\n        const v = bitfold((a, b) => a ^ b, this._avec, this._lastmask, 0);\n        return new Vector3vl(1, Uint32Array.of(v & ~has_x), Uint32Array.of(v | has_x));\n    }\n    /**\n     * Reducing XNOR of a vector.\n     *\n     * XNORs all bits of the vector together, producing a single bit.\n     *\n     * @return Singleton vector.\n     */\n    reduceXnor() {\n        return this.reduceXor().not();\n    }\n    /**\n     * Concatenates vectors, including this one, into a single vector.\n     *\n     * @param vs The other vectors.\n     */\n    concat(...vs) {\n        return Vector3vl.concat(this, ...vs);\n    }\n    /**\n     * Return a subvector.\n     *\n     * Uses same conventions as the slice function for JS arrays.\n     *\n     * @param start Number of the first bit to include in the result.\n     *              If omitted, first bit of the vector is used.\n     * @param end Number of the last bit to include in the result, plus one.\n     *            If omitted, last bit of the vector is used.\n     */\n    slice(start, end) {\n        if (start === undefined)\n            start = 0;\n        if (end === undefined)\n            end = this._bits;\n        if (end > this.bits)\n            end = this.bits;\n        if (start > end)\n            end = start;\n        if (bitnum(start) == 0) {\n            const avec = this._avec.slice(start >>> 5, (end + 31) >>> 5);\n            const bvec = this._bvec.slice(start >>> 5, (end + 31) >>> 5);\n            return new Vector3vl(end - start, avec, bvec);\n        }\n        else {\n            const words = (end - start + 31) >>> 5;\n            const avec = new Uint32Array(words), bvec = new Uint32Array(words);\n            let k = 0;\n            avec[k] = this._avec[start >> 5] >>> start;\n            bvec[k] = this._bvec[start >> 5] >>> start;\n            for (let idx = (start >> 5) + 1; idx <= (end >>> 5); idx++) {\n                avec[k] |= this._avec[idx] << -start;\n                bvec[k] |= this._bvec[idx] << -start;\n                k++;\n                if (k == words)\n                    break;\n                avec[k] = this._avec[idx] >>> start;\n                bvec[k] = this._bvec[idx] >>> start;\n            }\n            return new Vector3vl(end - start, avec, bvec);\n        }\n    }\n    /**\n     * Returns an iterator describing the vector.\n     *\n     * In each returned value, first _skip_ bits come from the vector B,\n     * the next _skip_ bits come from the vector A.\n     *\n     * This function calls [[toIteratorAnySkip]] or [[toIteratorPow2]].\n     *\n     * @param skip Number of bits in a single iterator step. 1 to 16.\n     */\n    toIterator(skip) {\n        if ((skip & (skip - 1)) == 0)\n            return this.toIteratorPow2(skip);\n        else\n            return this.toIteratorAnySkip(skip);\n    }\n    /**\n     * Returns an iterator describing the vector.\n     *\n     * In each returned value, first _skip_ bits come from the vector B,\n     * the next _skip_ bits come from the vector A.\n     *\n     * @param skip Number of bits in a single iterator step. 1 to 16.\n     */\n    *toIteratorAnySkip(skip) {\n        this.normalize();\n        const sm = (1 << skip) - 1;\n        let bit = 0, k = 0, m = sm, out = [];\n        while (bit < this._bits) {\n            let a = (this._avec[k] & m) >>> bit;\n            let b = (this._bvec[k] & m) >>> bit;\n            if ((m >>> bit) != sm && k + 1 != this._avec.length) {\n                const m1 = sm >> -bit;\n                a |= (this._avec[k + 1] & m1) << -bit;\n                b |= (this._bvec[k + 1] & m1) << -bit;\n            }\n            yield (a << skip) | b;\n            m <<= skip;\n            bit += skip;\n            if (m == 0) {\n                k++;\n                m = (sm << bit);\n            }\n        }\n    }\n    /**\n     * Returns an iterator describing the vector.\n     *\n     * In each returned value, first _skip_ bits come from the vector B,\n     * the next _skip_ bits come from the vector A.\n     *\n     * @param skip Number of bits in a single iterator step. 1, 2, 4, 8 or 16.\n     */\n    *toIteratorPow2(skip) {\n        this.normalize();\n        const sm = (1 << skip) - 1;\n        let bit = 0, k = 0, m = sm, out = [];\n        while (bit < this._bits) {\n            const a = (this._avec[k] & m) >>> bit;\n            const b = (this._bvec[k] & m) >>> bit;\n            yield (a << skip) | b;\n            m <<= skip;\n            bit += skip;\n            if (m == 0) {\n                k++;\n                m = sm;\n            }\n        }\n    }\n    /** Returns an array representation of the vector.\n     *\n     * The resulting array contains values -1, 0, 1.\n     */\n    toArray() {\n        // copy-paste'y code for performance\n        this.normalize();\n        const skip = 1;\n        const sm = (1 << skip) - 1;\n        let bit = 0, k = 0, m = sm, out = [];\n        while (bit < this._bits) {\n            const a = (this._avec[k] & m) >>> bit;\n            const b = (this._bvec[k] & m) >>> bit;\n            const v = (a << skip) | b;\n            out.push(v - 1 - Number(v > 1));\n            m <<= skip;\n            bit += skip;\n            if (m == 0) {\n                k++;\n                m = sm;\n            }\n        }\n        return out;\n    }\n    /** Returns a binary representation of the vector.\n     *\n     * Three characters are used:\n     * * '0' for logical 0,\n     * * 'x' for undefined value,\n     * * '1' for logical 1.\n     */\n    toBin() {\n        return toBinInternal(0, this._bits, this._avec, this._bvec);\n    }\n    /** Returns an octal representation of the vector.\n     *\n     * Returned characters can be '0' to '7' and 'x'. An 'x' value is returned\n     * if any of the three bits is undefined.\n     */\n    toOct() {\n        // copy-paste'y code for performance\n        this.normalize();\n        const skip = 3;\n        const sm = (1 << skip) - 1;\n        let bit = 0, k = 0, m = sm, out = [];\n        while (bit < this._bits) {\n            let a = (this._avec[k] & m) >>> bit;\n            let b = (this._bvec[k] & m) >>> bit;\n            if ((m >>> bit) != sm && k + 1 != this._avec.length) {\n                const m1 = sm >> -bit;\n                a |= (this._avec[k + 1] & m1) << -bit;\n                b |= (this._bvec[k + 1] & m1) << -bit;\n            }\n            const v = (a << skip) | b;\n            if (0x7 & v & ~(v >> 3))\n                out.push('x');\n            else\n                out.push((v >> 3).toString());\n            m <<= skip;\n            bit += skip;\n            if (m == 0) {\n                k++;\n                m = (sm << bit);\n            }\n        }\n        return out.reverse().join('');\n    }\n    /** Returns an hexadecimal representation of the vector.\n     *\n     * Returned characters can be '0' to '9', 'a' to 'f' and 'x'. An 'x' value\n     * is returned if any of the four bits is undefined.\n     */\n    toHex() {\n        return toHexInternal(0, this._bits, this._avec, this._bvec);\n    }\n    /** Returns a string describing the vector. */\n    toString() {\n        return \"Vector3vl \" + this.toBin();\n    }\n    /** Compares two vectors for equality. */\n    eq(v) {\n        if (v._bits != this._bits)\n            return false;\n        this.normalize();\n        v.normalize();\n        for (const i in this._avec) {\n            if (this._avec[i] != v._avec[i])\n                return false;\n            if (this._bvec[i] != v._bvec[i])\n                return false;\n        }\n        return true;\n    }\n    /** Normalize the vector.\n     *\n     * Because of the representation used, if _bits_ is not a multiple\n     * of 32, some internal bits do not contribute to the vector value,\n     * and for performance reasons can get arbitrary values in the course\n     * of computations. This procedure clears these bits.\n     * For internal use.\n     */\n    normalize() {\n        const lastmask = this._lastmask;\n        this._avec[this._avec.length - 1] &= lastmask;\n        this._bvec[this._bvec.length - 1] &= lastmask;\n    }\n    /** Mask for unused bits.\n     *\n     * For internal use.\n     */\n    get _lastmask() {\n        return (~0) >>> -this.bits;\n    }\n}\n/**\n * An empty vector.\n */\nVector3vl.empty = Vector3vl.zeros(0);\n/**\n * A single one.\n */\nVector3vl.one = Vector3vl.ones(1);\n/**\n * A single zero.\n */\nVector3vl.zero = Vector3vl.zeros(1);\n/**\n * A single undefined value.\n */\nVector3vl.x = Vector3vl.xes(1);\nexports.Vector3vl = Vector3vl;\n;\nclass Mem3vl {\n    constructor(bits, size, val) {\n        if (val === undefined)\n            val = 0;\n        this._bits = bits | 0;\n        this._size = size | 0;\n        this._wpc = (bits + 31) / 32 | 0;\n        this._avec = new Uint32Array(size * this._wpc).fill(val > 0 ? ~0 : 0);\n        this._bvec = new Uint32Array(size * this._wpc).fill(val >= 0 ? ~0 : 0);\n        if (this._size)\n            this.set(this._size - 1, this.get(this._size - 1)); // TODO faster\n    }\n    static fromData(data) {\n        if (data.length == 0)\n            return new Mem3vl(0, 0);\n        const ret = new Mem3vl(data[0].bits, data.length);\n        for (const i in data) {\n            data[i].normalize();\n            console.assert(data[i].bits == ret._bits);\n            for (let j = 0; j < ret._wpc; j++) {\n                const idx = Number(i) * ret._wpc + j;\n                ret._avec[idx] = data[i]._avec[j];\n                ret._bvec[idx] = data[i]._bvec[j];\n            }\n        }\n        return ret;\n    }\n    get bits() {\n        return this._bits;\n    }\n    get words() {\n        return this._size;\n    }\n    get(i) {\n        const idx = this._wpc * i;\n        return new Vector3vl(this._bits, this._avec.slice(idx, idx + this._wpc), this._bvec.slice(idx, idx + this._wpc));\n    }\n    set(i, v) {\n        console.assert(v.bits == this._bits);\n        v.normalize();\n        for (let j = 0; j < this._wpc; j++) {\n            this._avec[i * this._wpc + j] = v._avec[j];\n            this._bvec[i * this._wpc + j] = v._bvec[j];\n        }\n    }\n    toJSON() {\n        const rep = [];\n        let hexbuf = [];\n        let rleval, rlecnt = 0;\n        const hexflush = () => {\n            if (hexbuf.length == 0)\n                return;\n            if (hexbuf.reduce((a, b) => a + b.length, 0) == this._bits) { // to avoid confusion\n                const last = hexbuf.pop();\n                if (hexbuf.length > 0)\n                    rep.push(hexbuf.join(''));\n                rep.push(last);\n            }\n            else {\n                rep.push(hexbuf.join(''));\n            }\n            hexbuf = [];\n        };\n        const rleflush = () => {\n            if (rlecnt == 0)\n                return;\n            else if (rlecnt == 1) {\n                if (rleval.length == this._bits) {\n                    hexflush();\n                    rep.push(rleval);\n                }\n                else\n                    hexbuf.push(rleval);\n            }\n            else {\n                hexflush();\n                rep.push(rlecnt);\n                rep.push(rleval);\n            }\n            rleval = undefined;\n            rlecnt = 0;\n        };\n        const rlepush = (v) => {\n            if (rleval == v)\n                rlecnt++;\n            else {\n                rleflush();\n                rleval = v;\n                rlecnt = 1;\n            }\n        };\n        for (let i = 0; i < this._size; i++) {\n            const check = () => {\n                for (let j = 0; j < this._wpc; j++) {\n                    const xx = this._avec[i * this._wpc + j] ^ this._bvec[i * this._wpc + j];\n                    for (let k = 0; k < 4; k++) {\n                        const m = 0xff << (k * 16);\n                        const xm = xx & m;\n                        if (xm != m || xm != 0)\n                            return false;\n                    }\n                }\n                return true;\n            };\n            if (this._bits > 0 && check()) {\n                rlepush(toHexInternal(i * this._wpc, this._bits, this._avec, this._bvec));\n            }\n            else {\n                rlepush(toBinInternal(i * this._wpc, this._bits, this._avec, this._bvec));\n            }\n        }\n        rleflush();\n        hexflush();\n        return rep;\n    }\n    static fromJSON(bits, rep) {\n        const hexlen = Math.ceil(bits / 4);\n        let size = 0;\n        const xsize = (x) => {\n            if (x.length == bits || x.length == hexlen)\n                return 1;\n            else\n                return x.length / hexlen;\n        };\n        for (let i = 0; i < rep.length; i++) {\n            if (typeof rep[i] === \"string\") {\n                size += xsize(rep[i]);\n            }\n            else if (typeof rep[i] === \"number\") {\n                size += rep[i] * xsize(rep[i + 1]);\n                i++;\n            }\n        }\n        const ret = new Mem3vl(bits, size, -1);\n        let w = 0;\n        const decode = (x) => {\n            if (x.length == bits) {\n                fromBinInternal(x, w, bits, ret._avec, ret._bvec);\n                w += ret._wpc;\n            }\n            else if (x.length == hexlen) {\n                fromHexInternal(x, w, bits, ret._avec, ret._bvec);\n                w += ret._wpc;\n            }\n            else {\n                for (let i = 0; i < x.length / hexlen; i++) {\n                    fromHexInternal(x.slice(i * hexlen, (i + 1) * hexlen), w, bits, ret._avec, ret._bvec);\n                    w += ret._wpc;\n                }\n            }\n        };\n        for (let i = 0; i < rep.length; i++) {\n            if (typeof rep[i] === \"string\")\n                decode(rep[i]);\n            else if (typeof rep[i] === \"number\") {\n                for (const j of Array(rep[i]).keys())\n                    decode(rep[i + 1]);\n                i++;\n            }\n        }\n        return ret;\n    }\n    toArray() {\n        return Array(this._size).fill(0).map((a, i) => this.get(i));\n    }\n    toHex() {\n        // TODO faster\n        return this.toArray().map(x => x.toHex());\n    }\n    eq(m) {\n        if (m._bits != this._bits || m._size != this._size)\n            return false;\n        // TODO faster\n        for (let i = 0; i < this._size; i++)\n            if (!m.get(i).eq(this.get(i)))\n                return false;\n        return true;\n    }\n}\nexports.Mem3vl = Mem3vl;\n;\n"],"sourceRoot":""}