$date
	Thu Nov 28 15:34:17 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top $end
$var wire 1 ! clk $end
$scope module CLK $end
$var reg 1 ! out $end
$upscope $end
$scope module CPU $end
$var wire 1 ! clk $end
$var wire 1 " pcsrc $end
$var wire 32 # wrdata1_s5 [31:0] $end
$var wire 32 $ wrdata_s5 [31:0] $end
$var wire 5 % wrreg1 [4:0] $end
$var wire 5 & wrreg_s5 [4:0] $end
$var wire 5 ' wrreg_s4 [4:0] $end
$var wire 5 ( wrreg1_s5 [4:0] $end
$var wire 5 ) wrreg1_s4 [4:0] $end
$var wire 5 * wrreg [4:0] $end
$var wire 32 + seimm_s3 [31:0] $end
$var wire 32 , seimm1_s3 [31:0] $end
$var wire 32 - seimm1 [31:0] $end
$var wire 32 . seimm [31:0] $end
$var wire 5 / rt_s3 [4:0] $end
$var wire 5 0 rt1_s3 [4:0] $end
$var wire 5 1 rt1 [4:0] $end
$var wire 5 2 rt [4:0] $end
$var wire 5 3 rs1 [4:0] $end
$var wire 5 4 rs [4:0] $end
$var wire 1 5 regwrite_s5 $end
$var wire 1 6 regwrite_s4 $end
$var wire 1 7 regwrite_s3 $end
$var wire 1 8 regwrite1_s5 $end
$var wire 1 9 regwrite1_s4 $end
$var wire 1 : regwrite1_s3 $end
$var wire 1 ; regwrite1 $end
$var wire 1 < regwrite $end
$var wire 1 = regdst_s3 $end
$var wire 1 > regdst $end
$var wire 32 ? rdata_s5 [31:0] $end
$var wire 32 @ rdata [31:0] $end
$var wire 5 A rd_s3 [4:0] $end
$var wire 5 B rd [4:0] $end
$var wire 32 C pc8_s2 [31:0] $end
$var wire 32 D pc8 [31:0] $end
$var wire 6 E opcode1 [5:0] $end
$var wire 6 F opcode [5:0] $end
$var wire 1 G memwrite_s4 $end
$var wire 1 H memwrite_s3 $end
$var wire 1 I memwrite $end
$var wire 1 J memread_s4 $end
$var wire 1 K memread_s3 $end
$var wire 1 L memread $end
$var wire 32 M mem_address_s4 [31:0] $end
$var wire 32 N mem_address [31:0] $end
$var wire 32 O inst_s2 [31:0] $end
$var wire 32 P inst1_s2 [31:0] $end
$var wire 32 Q inst1 [31:0] $end
$var wire 32 R inst [31:0] $end
$var wire 16 S imm1 [15:0] $end
$var wire 16 T imm [15:0] $end
$var wire 6 U funct [5:0] $end
$var wire 32 V data2_s3 [31:0] $end
$var wire 32 W data2 [31:0] $end
$var wire 32 X data1_s3 [31:0] $end
$var wire 32 Y data12_s4 [31:0] $end
$var wire 32 Z data12_s3 [31:0] $end
$var wire 32 [ data12 [31:0] $end
$var wire 32 \ data11_s3 [31:0] $end
$var wire 32 ] data11 [31:0] $end
$var wire 32 ^ data1 [31:0] $end
$var wire 1 _ branch_ne_s2 $end
$var wire 1 ` branch_eq_s2 $end
$var wire 32 a baddr_s2 [31:0] $end
$var wire 1 b alusrc_s3 $end
$var wire 32 c alusrc_data2 [31:0] $end
$var wire 1 d alusrc $end
$var wire 32 e alurslt_s5 [31:0] $end
$var wire 32 f alurslt_s4 [31:0] $end
$var wire 32 g alurslt [31:0] $end
$var wire 2 h aluop_s3 [1:0] $end
$var wire 2 i aluop [1:0] $end
$var wire 4 j aluctl [3:0] $end
$var reg 6 k clock_counter [5:0] $end
$var reg 1 l flush_s1 $end
$var reg 1 m flush_s2 $end
$var reg 1 n flush_s3 $end
$var reg 32 o pc [31:0] $end
$var reg 1 p stall_s1_s2 $end
$scope module alu1 $end
$var wire 32 q a [31:0] $end
$var wire 32 r b [31:0] $end
$var wire 32 s sub_ab [31:0] $end
$var wire 1 t slt $end
$var wire 1 u oflow_sub $end
$var wire 1 v oflow_add $end
$var wire 1 w oflow $end
$var wire 4 x ctl [3:0] $end
$var wire 32 y add_ab [31:0] $end
$var reg 32 z out [31:0] $end
$upscope $end
$scope module alu_ctl1 $end
$var wire 2 { aluop [1:0] $end
$var wire 6 | funct [5:0] $end
$var reg 4 } _funct [3:0] $end
$var reg 4 ~ aluctl [3:0] $end
$upscope $end
$scope module ctl1 $end
$var wire 6 !" opcode [5:0] $end
$var wire 6 "" opcode1 [5:0] $end
$var reg 2 #" aluop [1:0] $end
$var reg 1 d alusrc $end
$var reg 1 ` branch_eq $end
$var reg 1 _ branch_ne $end
$var reg 1 L memread $end
$var reg 1 I memwrite $end
$var reg 1 > regdst $end
$var reg 1 < regwrite $end
$var reg 1 ; regwrite1 $end
$upscope $end
$scope module dm1 $end
$var wire 7 $" addr [6:0] $end
$var wire 1 ! clk $end
$var wire 1 J rd $end
$var wire 1 G wr $end
$var wire 32 %" wdata [31:0] $end
$var wire 32 &" rdata [31:0] $end
$upscope $end
$scope module im1 $end
$var wire 32 '" addr [31:0] $end
$var wire 32 (" data [31:0] $end
$var wire 32 )" data1 [31:0] $end
$upscope $end
$scope module reg1_s2_mem $end
$var wire 1 m clear $end
$var wire 1 ! clk $end
$var wire 64 *" in [63:0] $end
$var reg 64 +" out [63:0] $end
$upscope $end
$scope module reg_alurslt $end
$var wire 1 n clear $end
$var wire 1 ! clk $end
$var wire 32 ," in [31:0] $end
$var reg 32 -" out [31:0] $end
$upscope $end
$scope module reg_alurslt_s4 $end
$var wire 1 ." clear $end
$var wire 1 ! clk $end
$var wire 32 /" in [31:0] $end
$var reg 32 0" out [31:0] $end
$upscope $end
$scope module reg_data2_s3 $end
$var wire 1 n clear $end
$var wire 1 ! clk $end
$var wire 32 1" in [31:0] $end
$var reg 32 2" out [31:0] $end
$upscope $end
$scope module reg_rdata_s4 $end
$var wire 1 3" clear $end
$var wire 1 ! clk $end
$var wire 32 4" in [31:0] $end
$var reg 32 5" out [31:0] $end
$upscope $end
$scope module reg_regwrite_s4 $end
$var wire 1 6" clear $end
$var wire 1 ! clk $end
$var wire 2 7" in [1:0] $end
$var reg 2 8" out [1:0] $end
$upscope $end
$scope module reg_s2_control $end
$var wire 1 p clear $end
$var wire 1 ! clk $end
$var wire 8 9" in [7:0] $end
$var reg 8 :" out [7:0] $end
$upscope $end
$scope module reg_s2_mem $end
$var wire 1 m clear $end
$var wire 1 ! clk $end
$var wire 64 ;" in [63:0] $end
$var reg 64 <" out [63:0] $end
$upscope $end
$scope module reg_s2_rt_rd $end
$var wire 1 m clear $end
$var wire 1 ! clk $end
$var wire 15 =" in [14:0] $end
$var reg 15 >" out [14:0] $end
$upscope $end
$scope module reg_s2_seimm $end
$var wire 1 m clear $end
$var wire 1 ! clk $end
$var wire 64 ?" in [63:0] $end
$var reg 64 @" out [63:0] $end
$upscope $end
$scope module reg_s3 $end
$var wire 1 m clear $end
$var wire 1 ! clk $end
$var wire 4 A" in [3:0] $end
$var reg 4 B" out [3:0] $end
$upscope $end
$scope module reg_wrreg $end
$var wire 1 n clear $end
$var wire 1 ! clk $end
$var wire 10 C" in [9:0] $end
$var reg 10 D" out [9:0] $end
$upscope $end
$scope module reg_wrreg1 $end
$var wire 1 n clear $end
$var wire 1 ! clk $end
$var wire 32 E" in [31:0] $end
$var reg 32 F" out [31:0] $end
$upscope $end
$scope module reg_wrreg_s4 $end
$var wire 1 G" clear $end
$var wire 1 ! clk $end
$var wire 10 H" in [9:0] $end
$var reg 10 I" out [9:0] $end
$upscope $end
$scope module regm1 $end
$var wire 1 ! clk $end
$var wire 32 J" data1 [31:0] $end
$var wire 32 K" data11 [31:0] $end
$var wire 32 L" data12 [31:0] $end
$var wire 32 M" data2 [31:0] $end
$var wire 5 N" read1 [4:0] $end
$var wire 5 O" read11 [4:0] $end
$var wire 5 P" read12 [4:0] $end
$var wire 5 Q" read2 [4:0] $end
$var wire 1 5 regwrite $end
$var wire 1 8 regwrite1 $end
$var wire 32 R" wrdata [31:0] $end
$var wire 32 S" wrdata1 [31:0] $end
$var wire 5 T" wrreg [4:0] $end
$var wire 5 U" wrreg1 [4:0] $end
$var reg 32 V" _data1 [31:0] $end
$var reg 32 W" _data11 [31:0] $end
$var reg 32 X" _data12 [31:0] $end
$var reg 32 Y" _data2 [31:0] $end
$upscope $end
$scope module regr_im1_s2 $end
$var wire 1 Z" clear $end
$var wire 1 ! clk $end
$var wire 32 [" in [31:0] $end
$var reg 32 \" out [31:0] $end
$upscope $end
$scope module regr_im_s2 $end
$var wire 1 ]" clear $end
$var wire 1 ! clk $end
$var wire 32 ^" in [31:0] $end
$var reg 32 _" out [31:0] $end
$upscope $end
$scope module regr_pc8_s2 $end
$var wire 1 l clear $end
$var wire 1 ! clk $end
$var wire 32 `" in [31:0] $end
$var reg 32 a" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx a"
b1000 `"
bx _"
b100000000010010000000000000101 ^"
0]"
bx \"
b10001100000010100000000000000100 ["
0Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
0G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
06"
bx 5"
bx 4"
03"
bx 2"
bx 1"
bx 0"
bx /"
0."
bx -"
bx ,"
bx +"
bx *"
b10001100000010100000000000000100 )"
b100000000010010000000000000101 ("
b0 '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
xw
xv
xu
xt
bx s
bx r
bx q
xp
b0 o
0n
0m
0l
b1 k
bx j
bx i
bx h
bx g
bx f
bx e
xd
bx c
xb
bx a
x`
x_
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
b100000000010010000000000000101 R
b10001100000010100000000000000100 Q
bx P
bx O
bx N
bx M
xL
xK
xJ
xI
xH
xG
bx F
bx E
b1000 D
bx C
bx B
bx A
bx @
bx ?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
x"
1!
$end
#1
0!
#2
0"
1;
1<
0>
0I
1L
0_
0`
1d
b1000111 9"
b0 i
b0 #"
b0 ^
b0 J"
b0 V"
b1001 ;"
b1001 W
b1001 M"
b1001 Y"
b0 ]
b0 K"
b0 W"
b1010 *"
b1010 [
b1010 L"
b1010 X"
b11100 a
b101 .
b1000 F
b1000 !"
b0 4
b0 N"
b1001 2
b1001 Q"
b0 B
b101 T
b10100000000000000000000000000000100 ?"
b100 -
b100011 E
b100011 ""
b0 3
b0 O"
b10010000001010 ="
b1010 1
b1010 P"
b100 S
b100000000010010000000000000101 O
b10001100000010100000000000000100 P
b100000000010110000000000000111 ^"
b100000000010110000000000000111 R
b100000000010110000000000000111 ("
b10001100000011000000000000001000 ["
b10001100000011000000000000001000 Q
b10001100000011000000000000001000 )"
b1000 C
b1000 a"
b100000000010010000000000000101 _"
b10001100000010100000000000000100 \"
b10 k
b10000 D
b10000 `"
b1000 o
b1000 '"
1!
#3
0!
#4
b101 ,"
b101 g
b101 z
0w
1t
0v
1u
b1 }
b1100 *"
b1100 [
b1100 L"
b1100 X"
b1011 ;"
b1011 W
b1011 M"
b1011 Y"
b10 j
b10 x
b10 ~
b1001 *
b101 U
b101 |
b11111111111111111111111111111011 s
b101 y
b101 c
b101 r
b1000 -
b1100 1
b1100 P"
b1000 S
b11100000000000000000000000000001000 ?"
b111 .
b10110000001100 ="
b1011 2
b1011 Q"
b111 T
b100000000011010000000000001001 ^"
b100000000011010000000000001001 R
b100000000011010000000000001001 ("
b10001100000011100000000000001100 ["
b10001100000011100000000000001100 Q
b10001100000011100000000000001100 )"
1b
1:
17
b0 h
b0 {
0H
b1110 A"
1K
0=
b100101010 C"
b1010 %
b1010 0
b0 A
b1001 /
b100 N
b100 E"
b100 ,
b101 +
b1010 Z
b1010 1"
b0 \
b1001 V
b0 X
b0 q
b10001100000011000000000000001000 P
b100000000010110000000000000111 O
b11000 D
b11000 `"
b10000 o
b10000 '"
b11 k
b1000111 :"
b10010000001010 >"
b10100000000000000000000000000000100 @"
b1010 +"
b1001 <"
b10001100000011000000000000001000 \"
b100000000010110000000000000111 _"
b101100 a
b10000 C
b10000 a"
1!
#5
0!
#6
b111 ,"
b111 g
b111 z
b1101 ;"
b1101 W
b1101 M"
b1101 Y"
b1110 *"
b1110 [
b1110 L"
b1110 X"
b1100 }
b1001 .
b1101 2
b1101 Q"
b1001 T
b100100000000000000000000000000001100 ?"
b1100 -
b11010000001110 ="
b1110 1
b1110 P"
b1100 S
b11111111111111111111111111111001 s
b111 y
b111 c
b111 r
b111 U
b111 |
b1011 *
b100000000011010000000000001001 O
b10001100000011100000000000001100 P
b1011 V
b1100 Z
b1100 1"
b1000 N
b1000 E"
b1000 ,
b111 +
b101101100 C"
b1100 %
b1100 0
b1011 /
0G
1J
19
b11 7"
16
b101 f
b101 /"
b1 @
b1 &"
b1 4"
b1010 )
b100101010 H"
b1001 '
b1 $"
b1001010110111100000100000 ^"
b1001010110111100000100000 R
b1001010110111100000100000 ("
b10101100000010100000000000010000 ["
b10101100000010100000000000010000 Q
b10101100000010100000000000010000 )"
b111100 a
b11000 C
b11000 a"
b100000000011010000000000001001 _"
b10001100000011100000000000001100 \"
b1011 <"
b1100 +"
b11100000000000000000000000000001000 @"
b10110000001100 >"
b1110 B"
b101 -"
b1010 Y
b1010 %"
b1010 2"
b100101010 D"
b100 M
b100 F"
b100 k
b100000 D
b100000 `"
b11000 o
b11000 '"
1!
#7
0!
#8
b1001 ,"
b1001 g
b1001 z
1I
0;
1>
0L
0d
b10110100 9"
b10 i
b10 #"
b0 }
b1 *"
b1 [
b1 L"
b1 X"
b1011 W
b1011 M"
b1011 Y"
b10100000000000000000000000000001011 ;"
b101 ^
b101 J"
b101 V"
b10 @
b10 &"
b10 4"
b1101 *
b11111111111111111111111111110111 s
b1001 y
b1001 c
b1001 r
b1001 U
b1001 |
b10000 -
b101011 E
b101011 ""
b1010 1
b1010 P"
b10000 S
b11110000010000000000000000000000000000000010000 ?"
b111100000100000 .
b0 F
b0 !"
b1001 4
b1001 N"
b1011 2
b1011 Q"
b10110111101010 ="
b1111 B
b111100000100000 T
bx ^"
bx R
bx ("
bx ["
bx Q
bx )"
b1010 (
b1010 U"
b1001 &
b1001 T"
18
15
b10 $"
b1100 )
b101101100 H"
b1011 '
b111 f
b111 /"
b110101110 C"
b1110 %
b1110 0
b1101 /
b1100 N
b1100 E"
b1100 ,
b1001 +
b1110 Z
b1110 1"
b1101 V
b10101100000010100000000000010000 P
b1001010110111100000100000 O
b101000 D
b101000 `"
b100000 o
b100000 '"
b101 k
b100101010 I"
b101 $
b101 R"
b101 e
b101 0"
b1 #
b1 S"
b1 ?
b1 5"
b11 8"
b1000 M
b1000 F"
b101101100 D"
b1100 Y
b1100 %"
b1100 2"
b111 -"
b11010000001110 >"
b100100000000000000000000000000001100 @"
b1110 +"
b1101 <"
b10101100000010100000000000010000 \"
b1001010110111100000100000 _"
b11110000010100000 a
b100000 C
b100000 a"
1!
#9
0!
#10
b10010100 9"
0I
b10000 ,"
b10000 g
b10000 z
bx ^
bx J"
bx V"
bx ]
bx K"
bx W"
bx *"
bx [
bx L"
bx X"
b10 }
0w
bx .
bx F
bx !"
bx 4
bx N"
bx 2
bx Q"
bx B
bx T
bx ?"
bx -
bx E
bx ""
bx 3
bx O"
bx ="
bx 1
bx P"
bx S
b100000 U
b100000 |
b1011 c
b1011 r
b10 j
b10 x
b10 ~
b1111 *
b11 @
b11 &"
b11 4"
bx O
bx P
b1011 V
b11111111111111111111111111111010 s
b10000 y
b101 X
b101 q
b1 Z
b1 1"
b10000 N
b10000 E"
b10000 ,
b111100000100000 +
b111101010 C"
b1010 %
b1010 0
b1111 A
b1011 /
0b
0:
b10 h
b10 {
1H
b1001 A"
0K
1=
b1001 f
b1001 /"
b1110 )
b110101110 H"
b1101 '
b11 $"
bx ;"
bx W
bx M"
bx Y"
b1100 (
b1100 U"
b1011 &
b1011 T"
bx a
b101000 C
b101000 a"
bx _"
bx \"
b10100000000000000000000000000001011 <"
b1 +"
b11110000010000000000000000000000000000000010000 @"
b10110111101010 >"
b10110100 :"
b1001 -"
b1110 Y
b1110 %"
b1110 2"
b110101110 D"
b1100 M
b1100 F"
b10 #
b10 S"
b10 ?
b10 5"
b111 $
b111 R"
b111 e
b111 0"
b101101100 I"
b110 k
b110000 D
b110000 `"
b101000 o
b101000 '"
1!
#11
0!
#12
bx ,"
bx g
bx z
xv
xu
xw
b0 j
b0 x
b0 ~
xt
b0 }
b1 @
b1 &"
b1 4"
bx *
bx U
bx |
bx c
bx r
b1110 (
b1110 U"
b1101 &
b1101 T"
b100 $"
b1010 )
b111101010 H"
b1111 '
b10000 f
b10000 /"
1G
0J
b10 7"
09
b1000 A"
0H
bx C"
bx %
bx 0
bx A
bx /
bx ,
bx +
bx Z
bx 1"
bx N
bx E"
bx \
bx V
bx s
bx y
bx X
bx q
b111000 D
b111000 `"
b110000 o
b110000 '"
b111 k
b110101110 I"
b1001 $
b1001 R"
b1001 e
b1001 0"
b11 #
b11 S"
b11 ?
b11 5"
b10000 M
b10000 F"
b111101010 D"
b1 Y
b1 %"
b1 2"
b10000 -"
b1001 B"
b10010100 :"
bx >"
bx @"
bx +"
bx <"
b110000 C
b110000 a"
1!
#13
0!
#14
0G
bx f
bx /"
bx @
bx &"
bx 4"
bx )
bx H"
bx '
bx $"
08
b1010 (
b1010 U"
b1111 &
b1111 T"
b111000 C
b111000 a"
b1000 B"
bx -"
bx Y
bx %"
bx 2"
bx D"
bx M
bx F"
b10 8"
b1 #
b1 S"
b1 ?
b1 5"
b10000 $
b10000 R"
b10000 e
b10000 0"
b111101010 I"
b1000 k
b1000000 D
b1000000 `"
b111000 o
b111000 '"
1!
#15
0!
#16
bx (
bx U"
bx &
bx T"
b1001000 D
b1001000 `"
b1000000 o
b1000000 '"
b1001 k
bx I"
bx $
bx R"
bx e
bx 0"
bx #
bx S"
bx ?
bx 5"
b1000000 C
b1000000 a"
1!
